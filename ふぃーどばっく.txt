▼コードへの大まかなツッコミ
1. マークアップとプログラムの処理をなるべく分離する
・「どのような処理を行うか」と「どのような表示を行うか」をできるだけ分けて考え、コード上に表現する（関心の分離）
・処理を行う部品と表示を行う部品で分けて作っていれば、表示だけ豪華にしたいとき処理の部分を見る必要がないし、逆も同じ
・ウチのようにマークアップを行うコーダーと内部処理を行うシステムで分業化されている場合、責任範囲のファイルが明確になるなど、お互い楽になる

2. DBアクセス部分をなるべく他の部品から分離する
・これも関心の分離が目的
・SQLが各所に散らばってるとデータ構造の変更時などに沢山の箇所を修正しないといけなくなる
・SQLはPHPとは異なる言語なので、混ぜて書く部分は絞りたい
・SQLを使ってDBアクセスする関数を提供する層+その関数を利用するアプリケーション層に分け、アプリケーション層からSQLを直接触らないようにする

3. 同じ処理が複数箇所に書かれている
・関数化や共通部品の別ファイルへの追い出しが一般的な対処

4. ファイルの分割にあたり、ユーザがURLから直接起動するファイルと、そのファイルが読み込む内部処理のファイルはディレクトリを分ける
・DB設定とかが漏れ出しちゃう可能性の軽減

5. ユーザ入力をそのまま使って動的にSQLを組み立てるのにはセキュリティリスクがある
・ログイン名やパスワードでSQLインジェクションが可能な作りになっている
・信頼できない入力を使うならプリペアードステートメント or エスケープが必要
・「SQLインジェクション」でググれば仕組みは分かるハズだけど、必要なら攻撃例も見せます

6. 実行時の動的なテーブル生成が有効なことはあまり多くない（ユーザ登録時）
・MySQL他多くのRDBMSでDDLはロールバックできない
・usersテーブルへの登録からそのユーザのキーワードテーブル、記事タイトルテーブルの作成までの過程で何らかのエラーが起きた場合、作りかけの壊れたデータが残る事になる
・たとえば元コードだとハイフンを含むユーザ名/パスワードが登録されようとした場合、crate tableでテーブル名がバッククオートされてないので、黙って作成に失敗する（一見正常登録されたように見える）
・create tableの失敗を確認してusersテーブルから一度登録されたデータをコードで削除とかめんどくさい
・動的テーブル生成だとカラムの追加などのスキーマ変更や一括のデータ変更を行う際など、テーブルをまたがった操作が煩雑になる
・ユーザが増えた場合の性能も悪い
・対処としては、たとえば単一の titles テーブルを持ってレコードに外部キーとして user_id を入れることで、同じテーブル内でもどのユーザのものか区別が可能（検索キーワードも同じ）
・変える場合ログインチェックは各ページできちんと行うこと

7. 動的なテーブル生成はそもそもよくないけど、やるにしてもテーブル名で名前とパスワードの区切りをはっきりさせること
・例えばこの作りだと(abc, 123)で登録された後に(ab, c123)で登録されたりすると、abさんがabcさんのデータを見れちゃう事故が

8. 入力をバリデーションする
・あからさまな入力間違い（パスワード未設定とかメールアドレス未入力とか）を弾く
・メールアドレス空で登録すると1件だけ登録できるけど、2人目移行はunique制約で弾かれるとか悲しい問題が

▼その他仕様へのツッコミ
・基本的に(名前, パスワード)の組でユーザ管理されてるけど、名前にunique付けてよいのではないか
・パスワード変えるだけで同じユーザ名使えて嬉しいケースが思いつかない

▼細かいツッコミ
・なるべくマークアップや処理の流れが分かりやすくなるようインデントを付けること
 ・マークアップの入れ子構造やif/foreachなどの制御構造の適用範囲を明確化する
 ・マークアップに制御構造を混ぜる場合はコロン使った構文が便利
  ・ifやforeachの開始部分/終了部分がHTMLのタグっぽく書けるし、終端が}だと入れ子になってるとき分岐の終了かループの終了か分かり辛いけど、endifやendforeachなら多少区別しやすい
・touroku.phpの元コードでif ($stmt = true) { という行があるけど、これは「$stmtとtrueの比較が真の場合」ではなく「$stmtにtrueを代入した結果が真の場合」になってて、常に真になる
